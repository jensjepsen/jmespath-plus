[
  {
    "comment": "Dot syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "foo.bar",
        "result": null
      },
      {
        "expression": "foo.1",
        "error": "Syntax error, unexpected token: 1(Number)"
      },
      {
        "expression": "foo.-11",
        "error": "Syntax error, unexpected token: -11(Number)"
      },
      {
        "expression": "foo",
        "result": null
      },
      {
        "expression": "foo.",
        "error": "Syntax error, unexpected token: (EOF)"
      },
      {
        "expression": "foo.",
        "error": "Syntax error, unexpected token: (EOF)"
      },
      {
        "expression": ".foo",
        "error": "Invalid token (Dot): \".\""
      },
      {
        "expression": "foo..bar",
        "error": "Syntax error, unexpected token: .(Dot)"
      },
      {
        "expression": "foo.bar.",
        "error": "Syntax error, unexpected token: (EOF)"
      },
      {
        "expression": "foo[.]",
        "error": "Expected Star, got: Dot"
      }
    ]
  },
  {
    "comment": "Simple token errors",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": ".",
        "error": "Invalid token (Dot): \".\""
      },
      {
        "expression": ":",
        "error": "Invalid token (Colon): \":\""
      },
      {
        "expression": ",",
        "error": "Invalid token (Comma): \",\""
      },
      {
        "expression": "]",
        "error": "Invalid token (Rbracket): \"]\""
      },
      {
        "expression": "[",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "expression": "}",
        "error": "Invalid token (Rbrace): \"}\""
      },
      {
        "expression": "{",
        "error": "Expecting an identifier token, got: EOF"
      },
      {
        "expression": ")",
        "error": "Invalid token (Rparen): \")\""
      },
      {
        "expression": "(",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "expression": "((&",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "expression": "a[",
        "error": "Expected Star, got: EOF"
      },
      {
        "expression": "a]",
        "error": "Unexpected token type: Rbracket, value: ]"
      },
      {
        "expression": "a][",
        "error": "Unexpected token type: Rbracket, value: ]"
      },
      {
        "expression": "!",
        "error": "Invalid token (EOF): \"\""
      }
    ]
  },
  {
    "comment": "Boolean syntax errors",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "![!(!",
        "error": "Invalid token (EOF): \"\""
      }
    ]
  },
  {
    "comment": "Wildcard syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "*",
        "result": [
          "object"
        ]
      },
      {
        "expression": "*.*",
        "result": []
      },
      {
        "expression": "*.foo",
        "result": []
      },
      {
        "expression": "*[0]",
        "result": []
      },
      {
        "expression": ".*",
        "error": "Invalid token (Dot): \".\""
      },
      {
        "expression": "*foo",
        "error": "Unexpected token type: UnquotedIdentifier, value: foo"
      },
      {
        "expression": "*0",
        "error": "Unexpected token type: Number, value: 0"
      },
      {
        "expression": "foo[*]bar",
        "error": "Unexpected token type: UnquotedIdentifier, value: bar"
      },
      {
        "expression": "foo[*]*",
        "error": "Syntax error, unexpected token: *(Star)"
      }
    ]
  },
  {
    "comment": "Flatten syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "[]",
        "result": null
      }
    ]
  },
  {
    "comment": "Simple bracket syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "[0]",
        "result": null
      },
      {
        "expression": "[*]",
        "result": null
      },
      {
        "expression": "*.[0]",
        "error": "Invalid token (Number): \"0\""
      },
      {
        "expression": "*.[\"0\"]",
        "result": [
          [
            null
          ]
        ]
      },
      {
        "expression": "[*].bar",
        "result": null
      },
      {
        "expression": "[*][0]",
        "result": null
      },
      {
        "expression": "foo[#]",
        "error": "Unknown character: #"
      }
    ]
  },
  {
    "comment": "Multi-select list syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "foo[0]",
        "result": null
      },
      {
        "comment": "Valid multi-select of a list",
        "expression": "foo[0, 1]",
        "error": "Expected Rbracket, got: Comma"
      },
      {
        "expression": "foo.[0]",
        "error": "Invalid token (Number): \"0\""
      },
      {
        "expression": "foo.[*]",
        "result": null
      },
      {
        "comment": "Multi-select of a list with trailing comma",
        "expression": "foo[0, ]",
        "error": "Expected Rbracket, got: Comma"
      },
      {
        "comment": "Multi-select of a list with trailing comma and no close",
        "expression": "foo[0,",
        "error": "Expected Rbracket, got: Comma"
      },
      {
        "comment": "Multi-select of a list with trailing comma and no close",
        "expression": "foo.[a",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "comment": "Multi-select of a list with extra comma",
        "expression": "foo[0,, 1]",
        "error": "Expected Rbracket, got: Comma"
      },
      {
        "comment": "Multi-select of a list using an identifier index",
        "expression": "foo[abc]",
        "error": "Expected Star, got: UnquotedIdentifier"
      },
      {
        "comment": "Multi-select of a list using identifier indices",
        "expression": "foo[abc, def]",
        "error": "Expected Star, got: UnquotedIdentifier"
      },
      {
        "comment": "Multi-select of a list using an identifier index",
        "expression": "foo[abc, 1]",
        "error": "Expected Star, got: UnquotedIdentifier"
      },
      {
        "comment": "Multi-select of a list using an identifier index with trailing comma",
        "expression": "foo[abc, ]",
        "error": "Expected Star, got: UnquotedIdentifier"
      },
      {
        "comment": "Valid multi-select of a hash using an identifier index",
        "expression": "foo.[abc]",
        "result": null
      },
      {
        "comment": "Valid multi-select of a hash",
        "expression": "foo.[abc, def]",
        "result": null
      },
      {
        "comment": "Multi-select of a hash using a numeric index",
        "expression": "foo.[abc, 1]",
        "error": "Invalid token (Number): \"1\""
      },
      {
        "comment": "Multi-select of a hash with a trailing comma",
        "expression": "foo.[abc, ]",
        "error": "Unexpected token Rbracket"
      },
      {
        "comment": "Multi-select of a hash with extra commas",
        "expression": "foo.[abc,, def]",
        "error": "Invalid token (Comma): \",\""
      },
      {
        "comment": "Multi-select of a hash using number indices",
        "expression": "foo.[0, 1]",
        "error": "Invalid token (Number): \"0\""
      }
    ]
  },
  {
    "comment": "Multi-select hash syntax",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "comment": "No key or value",
        "expression": "a{}",
        "error": "Invalid token (Rbrace): \"}\""
      },
      {
        "comment": "No closing token",
        "expression": "a{",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "comment": "Not a key value pair",
        "expression": "a{foo}",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Missing value and closing character",
        "expression": "a{foo:",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Missing closing character",
        "expression": "a{foo: 0",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Missing value",
        "expression": "a{foo:}",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Trailing comma and no closing character",
        "expression": "a{foo: 0, ",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Missing value with trailing comma",
        "expression": "a{foo: ,}",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Accessing Array using an identifier",
        "expression": "a{foo: bar}",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "expression": "a{foo: 0}",
        "error": "Invalid token (UnquotedIdentifier): \"foo\""
      },
      {
        "comment": "Missing key-value pair",
        "expression": "a.{}",
        "error": "Expecting an identifier token, got: Rbrace"
      },
      {
        "comment": "Not a key-value pair",
        "expression": "a.{foo}",
        "error": "Expected Colon, got: Rbrace"
      },
      {
        "comment": "Missing value",
        "expression": "a.{foo:}",
        "error": "Invalid token (Rbrace): \"}\""
      },
      {
        "comment": "Missing value with trailing comma",
        "expression": "a.{foo: ,}",
        "error": "Invalid token (Comma): \",\""
      },
      {
        "comment": "Valid multi-select hash extraction",
        "expression": "a.{foo: bar}",
        "result": null
      },
      {
        "comment": "Valid multi-select hash extraction",
        "expression": "a.{foo: bar, baz: bam}",
        "result": null
      },
      {
        "comment": "Trailing comma",
        "expression": "a.{foo: bar, }",
        "error": "Expecting an identifier token, got: Rbrace"
      },
      {
        "comment": "Missing key in second key-value pair",
        "expression": "a.{foo: bar, baz}",
        "error": "Expected Colon, got: Rbrace"
      },
      {
        "comment": "Missing value in second key-value pair",
        "expression": "a.{foo: bar, baz:}",
        "error": "Invalid token (Rbrace): \"}\""
      },
      {
        "comment": "Trailing comma",
        "expression": "a.{foo: bar, baz: bam, }",
        "error": "Expecting an identifier token, got: Rbrace"
      },
      {
        "comment": "Nested multi select",
        "expression": "{\"\\\\\":{\" \":*}}",
        "result": {
          "\\": {
            " ": [
              "object"
            ]
          }
        }
      }
    ]
  },
  {
    "comment": "Or expressions",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "foo || bar",
        "result": null
      },
      {
        "expression": "foo ||",
        "error": "Invalid token (EOF): \"\""
      },
      {
        "expression": "foo.|| bar",
        "error": "Syntax error, unexpected token: ||(Or)"
      },
      {
        "expression": " || foo",
        "error": "Invalid token (Or): \"||\""
      },
      {
        "expression": "foo || || foo",
        "error": "Invalid token (Or): \"||\""
      },
      {
        "expression": "foo.[a || b]",
        "result": null
      },
      {
        "expression": "foo.[a ||]",
        "error": "Invalid token (Rbracket): \"]\""
      },
      {
        "expression": "\"foo",
        "error": "Unexpected end of JSON input"
      }
    ]
  },
  {
    "comment": "Filter expressions",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "foo[?bar==`\"baz\"`]",
        "result": null
      },
      {
        "expression": "foo[? bar == `\"baz\"` ]",
        "result": null
      },
      {
        "expression": "foo[ ?bar==`\"baz\"`]",
        "error": "Unknown character: ?"
      },
      {
        "expression": "foo[?bar==]",
        "error": "Invalid token (Rbracket): \"]\""
      },
      {
        "expression": "foo[?==]",
        "error": "Invalid token (EQ): \"==\""
      },
      {
        "expression": "foo[?==bar]",
        "error": "Invalid token (EQ): \"==\""
      },
      {
        "expression": "foo[?bar==baz?]",
        "error": "Unknown character: ?"
      },
      {
        "expression": "foo[?a.b.c==d.e.f]",
        "result": null
      },
      {
        "expression": "foo[?bar==`[0, 1, 2]`]",
        "result": null
      },
      {
        "expression": "foo[?bar==`[\"a\", \"b\", \"c\"]`]",
        "result": null
      },
      {
        "comment": "Literal char not escaped",
        "expression": "foo[?bar==`[\"foo`bar\"]`]",
        "error": "Unexpected end of JSON input"
      },
      {
        "comment": "Literal char escaped",
        "expression": "foo[?bar==`[\"foo\\`bar\"]`]",
        "result": null
      },
      {
        "comment": "Unknown comparator",
        "expression": "foo[?bar<>baz]",
        "error": "Invalid token (GT): \">\""
      },
      {
        "comment": "Unknown comparator",
        "expression": "foo[?bar^baz]",
        "error": "Unknown character: ^"
      },
      {
        "expression": "foo[bar==baz]",
        "error": "Expected Star, got: UnquotedIdentifier"
      },
      {
        "comment": "Quoted identifier in filter expression no spaces",
        "expression": "[?\"\\\\\">`\"foo\"`]",
        "result": null
      },
      {
        "comment": "Quoted identifier in filter expression with spaces",
        "expression": "[?\"\\\\\" > `\"foo\"`]",
        "result": null
      }
    ]
  },
  {
    "comment": "Filter expression errors",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "bar.`\"anything\"`",
        "error": "Syntax error, unexpected token: anything(Literal)"
      },
      {
        "expression": "bar.baz.noexists.`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "comment": "Literal wildcard projection",
        "expression": "foo[*].`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "expression": "foo[*].name.`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "expression": "foo[].name.`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "expression": "foo[].name.`\"literal\"`.`\"subliteral\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "comment": "Projecting a literal onto an empty list",
        "expression": "foo[*].name.noexist.`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "expression": "foo[].name.noexist.`\"literal\"`",
        "error": "Syntax error, unexpected token: literal(Literal)"
      },
      {
        "expression": "twolen[*].`\"foo\"`",
        "error": "Syntax error, unexpected token: foo(Literal)"
      },
      {
        "comment": "Two level projection of a literal",
        "expression": "twolen[*].threelen[*].`\"bar\"`",
        "error": "Syntax error, unexpected token: bar(Literal)"
      },
      {
        "comment": "Two level flattened projection of a literal",
        "expression": "twolen[].threelen[].`\"bar\"`",
        "error": "Syntax error, unexpected token: bar(Literal)"
      }
    ]
  },
  {
    "comment": "Identifiers",
    "given": {
      "type": "object"
    },
    "cases": [
      {
        "expression": "foo",
        "result": null
      },
      {
        "expression": "\"foo\"",
        "result": null
      },
      {
        "expression": "\"\\\\\"",
        "result": null
      }
    ]
  },
  {
    "comment": "Combined syntax",
    "given": [],
    "cases": [
      {
        "expression": "*||*|*|*",
        "result": null
      },
      {
        "expression": "*[]||[*]",
        "result": []
      },
      {
        "expression": "[*.*]",
        "result": [
          null
        ]
      }
    ]
  }
]
